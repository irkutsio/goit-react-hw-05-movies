{"version":3,"file":"static/js/607.843d24c8.chunk.js","mappings":"kQAEaA,EAAkBC,EAAAA,GAAAA,GAAH,4R,SCEfC,EAAmB,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAC3BC,GAAWC,EAAAA,EAAAA,MAEjB,OACE,0BACE,SAACL,EAAD,UACGG,EAAaG,KAAI,SAAAC,GAChB,OACE,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAME,IAAMC,MAAO,CAAEC,KAAMP,GAAxC,SACGG,EAAMK,SAFFL,EAAME,GAMlB,OAIR,E,2BCfYI,EAAY,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,UAC1B,GAAwCC,EAAAA,EAAAA,UAAS,IAAjD,eAAOZ,EAAP,KAAqBa,EAArB,KACA,GAAkCD,EAAAA,EAAAA,WAAS,GAA3C,eAAOE,EAAP,KAAkBC,EAAlB,KACA,GAA0BH,EAAAA,EAAAA,UAAS,MAAnC,eAAOI,EAAP,KAAcC,EAAd,KACA,GAA8BL,EAAAA,EAAAA,WAAS,GAAvC,eAAOM,EAAP,KAAgBC,EAAhB,KAwBA,OAtBAC,EAAAA,EAAAA,YAAU,WAGR,IAAMC,EAAe,mCAAG,WAAMV,GAAN,8EACtBI,GAAa,GADS,mBAGcO,EAAAA,EAAAA,IAAkBX,GAHhC,OAIuB,KADrCY,EAHc,QAIIC,QAAQC,QAC9BN,GAAW,GAEbN,EAAgBU,EAAoBC,SAPhB,gDASpBP,EAAS,KAAMS,SATK,yBAWpBX,GAAa,GAXO,4EAAH,sDAcjBJ,GACFU,EAAgBV,EAEnB,GAAE,CAACA,KAGF,2BACGG,IAAa,SAACa,EAAA,EAAD,IACbX,IAAS,yBAAG,IAAEA,EAAM,OACpBE,IAAW,yBAAK,wCAEjB,SAACnB,EAAD,CAAkBC,aAAcA,MAGrC,E,SC1CY4B,EAAO9B,EAAAA,GAAAA,IAAH,iXCKJ+B,EAAa,SAAC,GAAwB,IAAtBC,EAAqB,EAArBA,eAC3B,GAA0BlB,EAAAA,EAAAA,UAAS,IAAnC,eAAOR,EAAP,KAAc2B,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,MAEAd,EAAAA,EAAAA,YAAU,WACR,IAAMe,EAAQF,EAAaG,IAAI,UAAY,GAC3CN,EAAeK,EAChB,GAAE,CAACF,EAAcH,IAgBlB,OACE,UAACF,EAAD,YACE,eAAIS,MAAO,CAACC,MAAM,WAAlB,SAA8B,yBAC9B,kBAAMC,SAZW,SAAAC,GACnBA,EAAMC,iBAIJP,EAHG9B,EAGa,CAAE+B,MAAO/B,GAFT,CAAC,EAIpB,EAKG,WACE,kBAAOsC,KAAK,OAAOC,KAAK,QAAQC,SAlBjB,SAAAC,GACnB,IAAQC,EAAUD,EAAEE,OAAZD,MACRf,EAASe,EACV,KAgBK,mBAAQJ,KAAK,SAAb,UACE,SAAC,MAAD,CAAiBM,KAAK,cAK/B,ECtBD,EAfe,WACb,OAAmCpC,EAAAA,EAAAA,UAAS,IAA5C,eAAOD,EAAP,KAAkBsC,EAAlB,KAMA,OACE,4BACE,SAACpB,EAAD,CAAYC,eANW,SAAA1B,GACzB6C,EAAc7C,EACf,KAKG,SAACM,EAAD,CAAWC,UAAWA,MAG3B,C","sources":["components/MoviesByNameList/MoviesByNameList.styled.js","components/MoviesByNameList/MoviesByNameList.jsx","components/MovieList/MovieList.jsx","components/SearchForm/SearchForm.styled.js","components/SearchForm/SearchForm.jsx","components/pages/Movies.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const MovieByNameList = styled.ul`\npadding: 0;\n\nli {list-style: none;\ndisplay: flex;\n  justify-content: center;\n  align-items: center;\n  list-style: none;\n  width: 300px;\n  height: 40px;\n padding: 4px;\n  margin-bottom: 8px;\n  border: 2px solid #A0A0A0;\n  border-radius: 7px;\n}\n\n\n`","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\nimport { MovieByNameList} from './MoviesByNameList.styled';\n\nexport const MoviesByNameList = ({ moviesByName }) => {\n  const location = useLocation();\n\n  return (\n    <div>\n      <MovieByNameList>\n        {moviesByName.map(movie => {\n          return (\n            <li key={movie.id}>\n              <Link to={`${movie.id}`} state={{ from: location }}>\n                {movie.title}\n              </Link>\n            </li>\n          );\n        })}\n      </MovieByNameList>\n    </div>\n  );\n};\n\nMoviesByNameList.propTypes = {\n  moviesByName: PropTypes.array.isRequired,\n};\n","import PropTypes from 'prop-types';\n\nimport { MoviesByNameList } from 'components/MoviesByNameList/MoviesByNameList';\nimport { useEffect, useState } from 'react';\nimport { fetchMoviesByName } from 'services';\nimport { Loader } from 'components/Loader/Loader';\n\nexport const MovieList = ({ movieName }) => {\n  const [moviesByName, setMoviesByName] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [isEmpty, setIsEmpty] = useState(false);\n\n  useEffect(() => {\n    // if (moviesByName.length === 0) return;\n\n    const getMoviesByName = async movieName => {\n      setIsLoading(true);\n      try {\n        const fetchedMoviesByName = await fetchMoviesByName(movieName);\n        if (fetchedMoviesByName.results.length === 0) {\n          setIsEmpty(true);\n        }\n        setMoviesByName(fetchedMoviesByName.results);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    if (movieName) {\n      getMoviesByName(movieName);\n    }\n  }, [movieName]);\n\n  return (\n    <div>\n      {isLoading && <Loader />}\n      {error && <p> {error} </p>}\n      {isEmpty && <div>There is no movie for your request</div>}\n\n      <MoviesByNameList moviesByName={moviesByName} />\n    </div>\n  );\n};\n\nMovieList.propTypes = {\n  movieName: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Form = styled.div`\n  color:black;\n  width: 312px;\n\n  form {\n    \n    display: flex;\n    margin-bottom: 34px;\n    margin-top: 28px;\n    gap: 8px;\n    justify-content: space-between;\n    align-items: center;\n   \n  }\n\n  input {\n    width: 250px;\n    height: 20px;\n    outline: none;\n    border:1px solid #170b2a;\n    border-radius: 5px;\n  }\n\n \n`;\n","import PropTypes from 'prop-types';\nimport { HiOutlineSearch } from 'react-icons/hi';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Form } from './SearchForm.styled';\n\n\nexport const SearchForm = ({ onSearchSubmit }) => {\n  const [movie, setMovie] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  useEffect(() => {\n    const query = searchParams.get('query') || '';\n    onSearchSubmit(query);\n  }, [searchParams, onSearchSubmit]);\n\n  const handleChange = e => {\n    const { value } = e.target;\n    setMovie(value);\n  };\n\n  const handleSubmit = event => {\n    event.preventDefault();\n    if (!movie) {\n      setSearchParams({});\n    } else {\n      setSearchParams({ query: movie });\n    }\n  };\n\n  return (\n    <Form >\n      <h2 style={{color:'#170b2a'}}>Find movie by word:</h2>\n      <form onSubmit={handleSubmit}>\n        <input type=\"text\" name=\"movie\" onChange={handleChange} />\n        <button type=\"submit\">\n          <HiOutlineSearch size=\"17\" />\n        </button>\n      </form>\n    </Form>\n  );\n};\n\nSearchForm.propTypes = {\n  onSearchSubmit: PropTypes.func.isRequired,\n};\n","import { MovieList } from 'components/MovieList/MovieList';\nimport { SearchForm } from 'components/SearchForm/SearchForm';\nimport { useState } from 'react';\n\nconst Movies = () => {\n  const [movieName, setMouvieName] = useState('');\n\n  const handleSearchSubmit = movie => {\n    setMouvieName(movie);\n  };\n\n  return (\n    <div>\n      <SearchForm onSearchSubmit={handleSearchSubmit} />\n      <MovieList movieName={movieName} />\n    </div>\n  );\n};\n\nexport default Movies;\n"],"names":["MovieByNameList","styled","MoviesByNameList","moviesByName","location","useLocation","map","movie","to","id","state","from","title","MovieList","movieName","useState","setMoviesByName","isLoading","setIsLoading","error","setError","isEmpty","setIsEmpty","useEffect","getMoviesByName","fetchMoviesByName","fetchedMoviesByName","results","length","message","Loader","Form","SearchForm","onSearchSubmit","setMovie","useSearchParams","searchParams","setSearchParams","query","get","style","color","onSubmit","event","preventDefault","type","name","onChange","e","value","target","size","setMouvieName"],"sourceRoot":""}